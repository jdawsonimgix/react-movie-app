{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar config = {\n  warnings: {\n    fallbackImage: true,\n    sizesAttribute: true,\n    invalidARFormat: true\n  }\n};\n\nvar _setWarning = function _setWarning(name, value) {\n  if (!name || !(name in config.warnings)) {\n    return;\n  }\n\n  config.warnings[name] = value;\n};\n\nvar PublicConfigAPI = /*#__PURE__*/function () {\n  function PublicConfigAPI() {\n    _classCallCheck(this, PublicConfigAPI);\n  }\n\n  _createClass(PublicConfigAPI, null, [{\n    key: \"disableWarning\",\n    value: function disableWarning(name) {\n      _setWarning(name, false);\n    }\n  }, {\n    key: \"enableWarning\",\n    value: function enableWarning(name) {\n      _setWarning(name, true);\n    }\n  }]);\n\n  return PublicConfigAPI;\n}();\n\nexport default config;\nexport { PublicConfigAPI };","map":{"version":3,"sources":["../src/config.js"],"names":["config","warnings","fallbackImage","sizesAttribute","invalidARFormat","_setWarning","name","PublicConfigAPI"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EADL,IAAA;AAERC,IAAAA,cAAc,EAFN,IAAA;AAGRC,IAAAA,eAAe,EAAE;AAHT;AADG,CAAf;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAA,KAAA,EAAiB;AACnC,MAAI,CAAA,IAAA,IAAS,EAAEC,IAAI,IAAIN,MAAM,CAA7B,QAAa,CAAb,EAAyC;AACvC;AACD;;AACDA,EAAAA,MAAM,CAANA,QAAAA,CAAAA,IAAAA,IAAAA,KAAAA;AAJF,CAAA;;IAOMO,e;;;;;;;mCACkBD,I,EAAM;AAC1BD,MAAAA,WAAW,CAAA,IAAA,EAAXA,KAAW,CAAXA;AACD;;;kCACoBC,I,EAAM;AACzBD,MAAAA,WAAW,CAAA,IAAA,EAAXA,IAAW,CAAXA;AACD;;;;;;AAGH,eAAA,MAAA;AACA,SAAA,eAAA","sourcesContent":["const config = {\n  warnings: {\n    fallbackImage: true,\n    sizesAttribute: true,\n    invalidARFormat: true,\n  },\n};\n\nconst _setWarning = (name, value) => {\n  if (!name || !(name in config.warnings)) {\n    return;\n  }\n  config.warnings[name] = value;\n};\n\nclass PublicConfigAPI {\n  static disableWarning(name) {\n    _setWarning(name, false);\n  }\n  static enableWarning(name) {\n    _setWarning(name, true);\n  }\n}\n\nexport default config;\nexport { PublicConfigAPI };\n"]},"metadata":{},"sourceType":"module"}