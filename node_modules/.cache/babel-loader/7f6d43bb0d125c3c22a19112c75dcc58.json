{"ast":null,"code":"/**\n * Finds the closest value in the search array to the value provided using a binary search\n * If the value is in the middle of two candidate values, it chooses the higher value\n */\nexport default function findClosest(searchValue, arr) {\n  if (searchValue < arr[0]) {\n    return arr[0];\n  }\n\n  if (searchValue > arr[arr.length - 1]) {\n    return arr[arr.length - 1];\n  }\n\n  var mid;\n  var lo = 0;\n  var hi = arr.length - 1;\n\n  while (hi - lo > 1) {\n    mid = Math.floor((lo + hi) / 2);\n\n    if (arr[mid] < searchValue) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  if (searchValue - arr[lo] < arr[hi] - searchValue) {\n    return arr[lo];\n  }\n\n  return arr[hi];\n}","map":{"version":3,"sources":["../src/findClosest.js"],"names":["searchValue","arr","lo","hi","mid","Math"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAAA,WAAA,CAAA,WAAA,EAAA,GAAA,EAAuC;AACpD,MAAIA,WAAW,GAAGC,GAAG,CAArB,CAAqB,CAArB,EAA0B;AACxB,WAAOA,GAAG,CAAV,CAAU,CAAV;AACD;;AACD,MAAID,WAAW,GAAGC,GAAG,CAACA,GAAG,CAAHA,MAAAA,GAAtB,CAAqB,CAArB,EAAuC;AACrC,WAAOA,GAAG,CAACA,GAAG,CAAHA,MAAAA,GAAX,CAAU,CAAV;AACD;;AACD,MAAA,GAAA;AACA,MAAIC,EAAE,GAAN,CAAA;AACA,MAAIC,EAAE,GAAGF,GAAG,CAAHA,MAAAA,GAAT,CAAA;;AACA,SAAOE,EAAE,GAAFA,EAAAA,GAAP,CAAA,EAAoB;AAClBC,IAAAA,GAAG,GAAGC,IAAI,CAAJA,KAAAA,CAAW,CAACH,EAAE,GAAH,EAAA,IAAjBE,CAAMC,CAAND;;AACA,QAAIH,GAAG,CAAHA,GAAG,CAAHA,GAAJ,WAAA,EAA4B;AAC1BC,MAAAA,EAAE,GAAFA,GAAAA;AADF,KAAA,MAEO;AACLC,MAAAA,EAAE,GAAFA,GAAAA;AACD;AACF;;AACD,MAAIH,WAAW,GAAGC,GAAG,CAAjBD,EAAiB,CAAjBA,GAAwBC,GAAG,CAAHA,EAAG,CAAHA,GAA5B,WAAA,EAAmD;AACjD,WAAOA,GAAG,CAAV,EAAU,CAAV;AACD;;AACD,SAAOA,GAAG,CAAV,EAAU,CAAV;AACD","sourcesContent":["/**\n * Finds the closest value in the search array to the value provided using a binary search\n * If the value is in the middle of two candidate values, it chooses the higher value\n */\nexport default function findClosest(searchValue, arr) {\n  if (searchValue < arr[0]) {\n    return arr[0];\n  }\n  if (searchValue > arr[arr.length - 1]) {\n    return arr[arr.length - 1];\n  }\n  var mid;\n  var lo = 0;\n  var hi = arr.length - 1;\n  while (hi - lo > 1) {\n    mid = Math.floor((lo + hi) / 2);\n    if (arr[mid] < searchValue) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  if (searchValue - arr[lo] < arr[hi] - searchValue) {\n    return arr[lo];\n  }\n  return arr[hi];\n}\n"]},"metadata":{},"sourceType":"module"}