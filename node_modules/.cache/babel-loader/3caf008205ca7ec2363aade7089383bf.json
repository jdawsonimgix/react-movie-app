{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\nCopyright Â© 2015 by Coursera\nLicensed under the Apache License 2.0, seen https://github.com/coursera/react-imgix/blob/master/LICENSE\n\nMinor syntax modifications have been made\n*/\n\n\nvar PACKAGE_VERSION = \"9.3.0\";\nimport extractQueryParams from \"./extractQueryParams\";\nimport ImgixClient from \"@imgix/js-core\"; // @see https://www.imgix.com/docs/reference\n\nvar PARAM_EXPANSION = Object.freeze({\n  // Adjustment\n  brightness: \"bri\",\n  contrast: \"con\",\n  exposure: \"exp\",\n  gamma: \"gam\",\n  highlights: \"high\",\n  hue: \"hue\",\n  invert: \"invert\",\n  saturation: \"sat\",\n  shaddows: \"shad\",\n  shadows: \"shad\",\n  sharpness: \"sharp\",\n  \"unsharp-mask\": \"usm\",\n  \"unsharp-radius\": \"usmrad\",\n  vibrance: \"vib\",\n  // Automatic\n  \"auto-features\": \"auto\",\n  // Background\n  \"background-color\": \"bg\",\n  // Blend\n  blend: \"blend\",\n  \"blend-mode\": \"bm\",\n  \"blend-align\": \"ba\",\n  \"blend-alpha\": \"balph\",\n  \"blend-padding\": \"bp\",\n  \"blend-width\": \"bw\",\n  \"blend-height\": \"bh\",\n  \"blend-fit\": \"bf\",\n  \"blend-crop\": \"bc\",\n  \"blend-size\": \"bs\",\n  \"blend-x\": \"bx\",\n  \"blend-y\": \"by\",\n  // Border & Padding\n  border: \"border\",\n  padding: \"pad\",\n  // Face Detection\n  \"face-index\": \"faceindex\",\n  \"face-padding\": \"facepad\",\n  faces: \"faces\",\n  // Format\n  \"chroma-subsampling\": \"chromasub\",\n  \"color-quantization\": \"colorquant\",\n  download: \"dl\",\n  DPI: \"dpi\",\n  format: \"fm\",\n  \"lossless-compression\": \"lossless\",\n  quality: \"q\",\n  // Mask\n  \"mask-image\": \"mask\",\n  // Mask\n  \"noise-blur\": \"nr\",\n  \"noise-sharpen\": \"nrs\",\n  // Palette n/a\n  // PDF n/a\n  // Pixel Density n/a\n  // Rotation\n  \"flip-direction\": \"flip\",\n  orientation: \"or\",\n  \"rotation-angle\": \"rot\",\n  // Size\n  \"crop-mode\": \"crop\",\n  \"fit-mode\": \"fit\",\n  \"image-height\": \"h\",\n  \"image-width\": \"w\",\n  // Stylize\n  blurring: \"blur\",\n  halftone: \"htn\",\n  monotone: \"mono\",\n  pixelate: \"px\",\n  \"sepia-tone\": \"sepia\",\n  // Trim TODO\n  // Watermark TODO\n  // Extra\n  height: \"h\",\n  width: \"w\"\n});\nvar DEFAULT_OPTIONS = Object.freeze({\n  auto: \"format\" // http://www.imgix.com/docs/reference/automatic#param-auto\n\n});\n/**\n * Construct a URL for an image with an Imgix proxy, expanding image options\n * per the [API reference docs](https://www.imgix.com/docs/reference).\n * @param  {String} src         src of raw image\n * @param  {Object} longOptions map of image API options, in long or short form per expansion rules\n * @return {String}             URL of image src transformed by Imgix\n */\n\nfunction constructUrl(src, longOptions) {\n  if (!src) {\n    return \"\";\n  }\n\n  var params = compactParamKeys(longOptions);\n\n  var _extractClientAndPath = extractClientAndPathComponents(src),\n      client = _extractClientAndPath.client,\n      pathComponents = _extractClientAndPath.pathComponents;\n\n  return client.buildURL(pathComponents.join(\"/\"), params);\n}\n\nfunction compactParamKeys(longOptions) {\n  var keys = Object.keys(longOptions);\n  var keysLength = keys.length;\n  var params = {};\n\n  for (var i = 0; i < keysLength; i++) {\n    var key = keys[i];\n\n    if (PARAM_EXPANSION[key]) {\n      params[PARAM_EXPANSION[key]] = longOptions[key];\n    } else {\n      params[key] = longOptions[key];\n    }\n  }\n\n  return params;\n}\n\nfunction extractClientAndPathComponents(src) {\n  var _src$split = src.split(\"://\"),\n      _src$split2 = _slicedToArray(_src$split, 2),\n      scheme = _src$split2[0],\n      rest = _src$split2[1];\n\n  var _rest$split = rest.split(\"/\"),\n      _rest$split2 = _toArray(_rest$split),\n      domain = _rest$split2[0],\n      pathComponents = _rest$split2.slice(1);\n\n  var useHTTPS = scheme == \"https\";\n  var client = new ImgixClient({\n    domain: domain,\n    useHTTPS: useHTTPS,\n    includeLibraryParam: false\n  });\n  return {\n    client: client,\n    pathComponents: pathComponents\n  };\n}\n\nfunction buildURLPublic(src) {\n  var imgixParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var disableLibraryParam = options.disableLibraryParam;\n\n  var _extractQueryParams = extractQueryParams(src),\n      _extractQueryParams2 = _slicedToArray(_extractQueryParams, 2),\n      rawSrc = _extractQueryParams2[0],\n      params = _extractQueryParams2[1];\n\n  return constructUrl(rawSrc, _extends({}, params, imgixParams, disableLibraryParam ? {} : {\n    ixlib: \"react-\".concat(PACKAGE_VERSION)\n  }));\n}\n\nexport default constructUrl;\nexport { buildURLPublic, compactParamKeys, extractClientAndPathComponents };","map":{"version":3,"sources":["../src/constructUrl.js"],"names":["PACKAGE_VERSION","PARAM_EXPANSION","brightness","contrast","exposure","gamma","highlights","hue","invert","saturation","shaddows","shadows","sharpness","vibrance","blend","border","padding","faces","download","DPI","format","quality","orientation","blurring","halftone","monotone","pixelate","height","width","DEFAULT_OPTIONS","auto","params","compactParamKeys","client","pathComponents","extractClientAndPathComponents","keys","Object","keysLength","i","key","longOptions","scheme","rest","src","domain","useHTTPS","includeLibraryParam","imgixParams","options","disableLibraryParam","rawSrc","extractQueryParams","constructUrl","ixlib"],"mappings":"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","sourcesContent":["/*\nCopyright Â© 2015 by Coursera\nLicensed under the Apache License 2.0, seen https://github.com/coursera/react-imgix/blob/master/LICENSE\n\nMinor syntax modifications have been made\n*/\n\nconst PACKAGE_VERSION = require(\"../package.json\").version;\nimport extractQueryParams from \"./extractQueryParams\";\nimport ImgixClient from \"@imgix/js-core\";\n\n// @see https://www.imgix.com/docs/reference\nvar PARAM_EXPANSION = Object.freeze({\n  // Adjustment\n  brightness: \"bri\",\n  contrast: \"con\",\n  exposure: \"exp\",\n  gamma: \"gam\",\n  highlights: \"high\",\n  hue: \"hue\",\n  invert: \"invert\",\n  saturation: \"sat\",\n  shaddows: \"shad\",\n  shadows: \"shad\",\n  sharpness: \"sharp\",\n  \"unsharp-mask\": \"usm\",\n  \"unsharp-radius\": \"usmrad\",\n  vibrance: \"vib\",\n\n  // Automatic\n  \"auto-features\": \"auto\",\n\n  // Background\n  \"background-color\": \"bg\",\n\n  // Blend\n  blend: \"blend\",\n  \"blend-mode\": \"bm\",\n  \"blend-align\": \"ba\",\n  \"blend-alpha\": \"balph\",\n  \"blend-padding\": \"bp\",\n  \"blend-width\": \"bw\",\n  \"blend-height\": \"bh\",\n  \"blend-fit\": \"bf\",\n  \"blend-crop\": \"bc\",\n  \"blend-size\": \"bs\",\n  \"blend-x\": \"bx\",\n  \"blend-y\": \"by\",\n\n  // Border & Padding\n  border: \"border\",\n  padding: \"pad\",\n\n  // Face Detection\n  \"face-index\": \"faceindex\",\n  \"face-padding\": \"facepad\",\n  faces: \"faces\",\n\n  // Format\n  \"chroma-subsampling\": \"chromasub\",\n  \"color-quantization\": \"colorquant\",\n  download: \"dl\",\n  DPI: \"dpi\",\n  format: \"fm\",\n  \"lossless-compression\": \"lossless\",\n  quality: \"q\",\n\n  // Mask\n  \"mask-image\": \"mask\",\n\n  // Mask\n  \"noise-blur\": \"nr\",\n  \"noise-sharpen\": \"nrs\",\n\n  // Palette n/a\n  // PDF n/a\n  // Pixel Density n/a\n\n  // Rotation\n  \"flip-direction\": \"flip\",\n  orientation: \"or\",\n  \"rotation-angle\": \"rot\",\n\n  // Size\n  \"crop-mode\": \"crop\",\n  \"fit-mode\": \"fit\",\n  \"image-height\": \"h\",\n  \"image-width\": \"w\",\n\n  // Stylize\n  blurring: \"blur\",\n  halftone: \"htn\",\n  monotone: \"mono\",\n  pixelate: \"px\",\n  \"sepia-tone\": \"sepia\",\n\n  // Trim TODO\n  // Watermark TODO\n\n  // Extra\n  height: \"h\",\n  width: \"w\",\n});\n\nvar DEFAULT_OPTIONS = Object.freeze({\n  auto: \"format\", // http://www.imgix.com/docs/reference/automatic#param-auto\n});\n\n/**\n * Construct a URL for an image with an Imgix proxy, expanding image options\n * per the [API reference docs](https://www.imgix.com/docs/reference).\n * @param  {String} src         src of raw image\n * @param  {Object} longOptions map of image API options, in long or short form per expansion rules\n * @return {String}             URL of image src transformed by Imgix\n */\nfunction constructUrl(src, longOptions) {\n  if (!src) {\n    return \"\";\n  }\n  const params = compactParamKeys(longOptions);\n  const { client, pathComponents } = extractClientAndPathComponents(src);\n  return client.buildURL(pathComponents.join(\"/\"), params);\n}\n\nfunction compactParamKeys(longOptions) {\n  const keys = Object.keys(longOptions);\n  const keysLength = keys.length;\n  const params = {};\n  for (let i = 0; i < keysLength; i++) {\n    let key = keys[i];\n    if (PARAM_EXPANSION[key]) {\n      params[PARAM_EXPANSION[key]] = longOptions[key];\n    } else {\n      params[key] = longOptions[key];\n    }\n  }\n\n  return params;\n}\n\nfunction extractClientAndPathComponents(src) {\n  const [scheme, rest] = src.split(\"://\");\n  const [domain, ...pathComponents] = rest.split(\"/\");\n  let useHTTPS = scheme == \"https\";\n\n  const client = new ImgixClient({\n    domain: domain,\n    useHTTPS: useHTTPS,\n    includeLibraryParam: false,\n  });\n\n  return { client, pathComponents };\n}\n\nfunction buildURLPublic(src, imgixParams = {}, options = {}) {\n  const { disableLibraryParam } = options;\n\n  const [rawSrc, params] = extractQueryParams(src);\n\n  return constructUrl(\n    rawSrc,\n    Object.assign(\n      {},\n      params,\n      imgixParams,\n      disableLibraryParam ? {} : { ixlib: `react-${PACKAGE_VERSION}` }\n    )\n  );\n}\n\nexport default constructUrl;\n\nexport { buildURLPublic, compactParamKeys, extractClientAndPathComponents };\n"]},"metadata":{},"sourceType":"module"}