{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext, createContext } from 'react';\nvar ImgixContext = /*#__PURE__*/createContext();\n/**\n * `useImgixContext()` tries to invoke `React.useContext()`. If no context\n * is available, this function returns `undefined`. \n * @returns The context defined by the closest parent `ImgixProvider`.\n */\n\nfunction useImgixContext() {\n  return useContext(ImgixContext);\n}\n/**\n * Creates a Provider component that passes `reactImgixProps` as the Context \n * for child components who use the `useImgixContext()` custom hook or \n * `React.useContext()` API.\n * @param {React.Element <typeof Component>} children \n * @param {Object} reactImgixProps \n * @returns React.Element\n */\n\n\nfunction ImgixProvider(_ref) {\n  var children = _ref.children,\n      reactImgixProps = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var value = reactImgixProps;\n\n  if (children == null || children.length < 1) {\n    console.error(\"ImgixProvider must have at least one Imgix child component\");\n  }\n\n  return /*#__PURE__*/React.createElement(ImgixContext.Provider, {\n    value: value\n  }, children);\n}\n\nexport { ImgixProvider, useImgixContext };","map":{"version":3,"sources":["../../src/HOCs/imgixProvider.jsx"],"names":["ImgixContext","createContext","useContext","children","reactImgixProps","value","console"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,aAAA,QAAA,OAAA;AAEA,IAAMA,YAAY,GAAA,aAAGC,aAArB,EAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,eAAA,GAA2B;AACzB,SAAOC,UAAU,CAAjB,YAAiB,CAAjB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,aAAA,CAAA,IAAA,EAAuD;AAAA,MAA/BC,QAA+B,GAAA,IAAA,CAA/BA,QAA+B;AAAA,MAAlBC,eAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AACrD,MAAMC,KAAK,GAAX,eAAA;;AAEA,MAAKF,QAAQ,IAARA,IAAAA,IAAoBA,QAAQ,CAARA,MAAAA,GAAzB,CAAA,EAA8C;AAC5CG,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,4DAAAA;AACD;;AACD,SAAA,aAAO,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAAED;AAA9B,GAAA,EAAP,QAAO,CAAP;AACD;;AAED,SAAA,aAAA,EAAA,eAAA","sourcesContent":["import React, { useContext, createContext } from 'react'\n\nconst ImgixContext = createContext()\n\n/**\n * `useImgixContext()` tries to invoke `React.useContext()`. If no context\n * is available, this function returns `undefined`. \n * @returns The context defined by the closest parent `ImgixProvider`.\n */\nfunction useImgixContext() {\n  return useContext(ImgixContext)\n}\n\n/**\n * Creates a Provider component that passes `reactImgixProps` as the Context \n * for child components who use the `useImgixContext()` custom hook or \n * `React.useContext()` API.\n * @param {React.Element <typeof Component>} children \n * @param {Object} reactImgixProps \n * @returns React.Element\n */\nfunction ImgixProvider({children, ...reactImgixProps}) {\n  const value = reactImgixProps\n\n  if ( children == null || children.length < 1) {\n    console.error(\"ImgixProvider must have at least one Imgix child component\")\n  }\n  return <ImgixContext.Provider value={value}>{children}</ImgixContext.Provider>\n}\n\nexport {ImgixProvider, useImgixContext}\n"]},"metadata":{},"sourceType":"module"}