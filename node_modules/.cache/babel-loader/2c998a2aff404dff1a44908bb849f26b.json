{"ast":null,"code":"function _objectEntries(obj) {\n  var entries = [];\n  var keys = Object.keys(obj);\n\n  for (var k = 0; k < keys.length; k++) entries.push([keys[k], obj[keys[k]]]);\n\n  return entries;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { PARAMS_EXP_MAP } from \"./constants\";\n/**\n * Creates a 1-step, or complete, URL from `domain` and `src` Strings.\n *\n * - First, the function checks if src has a defined `domain`. If it does, it \n * checks to see if `src` has a scheme, and prepends \"http\" or \"https\" as needed\n * - Otherwise, formatSrc formats `domain` and `src` Strings.\n *   - First it strips the two strings of the  leading and `/` or trailing `/` \n *     slash characters.\n *   - Then, it joins the two strings on a `/` character. IE, \n *    `strippedDomain + \"/\" + strippedSrc`.\n *   - If `domain` String argument `null` or `undefined`, the function returns\n *    the original `src` String.\n *\n * @param {String} src - URL that is either 1-step or 2-step\n * @param {String} domain - Domain string, optional\n * @returns 1-step, or complete, URL String. Ex, _assets.ix.net/foo/bar.jpg_\n */\n\nexport function formatSrc(src, domain) {\n  var useHTTPS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true; // ignore if already has protocol\n\n  if (src.indexOf(\"://\") !== -1) {\n    return src;\n  } else {\n    // prepend domain if defined\n    if (domain == null) {\n      return src;\n    }\n\n    var strippedDomain = domain ? domain.replace(/^\\/|\\/$/g, '') : \"\";\n    var strippedSrc = src.replace(/^\\/|\\/$/g, '');\n    var prefix = useHTTPS ? \"https://\" : \"http://\";\n    return prefix + strippedDomain + \"/\" + strippedSrc;\n  }\n}\n/**\n * A function that formats the following values in the props Object:\n *\n * - `width`: if undefined or negative gets set to `undefined`.\n * - `height`: if undefined or negative gets set to `undefined`.\n * - `src`: concatenated to `domain` if `src` defined and has no domain.\n *\n * @param {Object} props \n * @returns A formatted `props` Object.\n */\n\nexport var formatProps = function formatProps(props) {\n  var width = !props.width || props.width <= 1 ? undefined : props.width;\n  var height = !props.height || props.height <= 1 ? undefined : props.height;\n  var src = props.src ? formatSrc(props.src, props.domain, props.useHttps) : undefined;\n  return _extends({}, props, {\n    width: width,\n    height: height,\n    src: src\n  });\n};\n/**\n * Function that shortens params keys according to the imgix spec.\n * @param {Object} params - imgixParams object\n * @returns imgixParams object with shortened keys\n * @see https://www.imgix.com/docs/reference\n */\n\nexport var collapseImgixParams = function collapseImgixParams(params) {\n  if (params == null) {\n    return params;\n  }\n\n  var compactedParams = {};\n\n  for (var _i = 0, _Object$entries = _objectEntries(params); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        k = _Object$entries$_i[0],\n        v = _Object$entries$_i[1];\n\n    if (PARAMS_EXP_MAP[k]) {\n      compactedParams[PARAMS_EXP_MAP[k]] = v;\n    } else {\n      compactedParams[k] = v;\n    }\n  }\n\n  return compactedParams;\n};\n/**\n * `processPropsHOF` takes a Component's props and formats them to adhere to the \n * ImgixClient's specifications.\n * \n * @param {React.Element<typeof Component>} Component - A react component with\n * defined `props`.\n * @returns A React Component who's `props` have been formatted and \n * `imgixParams` have been collapsed.\n */\n\nexport var processPropsHOF = function processPropsHOF(Component) {\n  return function (props) {\n    var formattedProps = formatProps(props);\n    var formattedImgixParams = collapseImgixParams(formattedProps.imgixParams);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, formattedProps, {\n      imgixParams: formattedImgixParams\n    }));\n  };\n};","map":{"version":3,"sources":["../../src/HOFs/propFormatter.js"],"names":["useHTTPS","src","domain","strippedDomain","strippedSrc","prefix","formatProps","width","props","height","formatSrc","collapseImgixParams","params","compactedParams","k","v","PARAMS_EXP_MAP","processPropsHOF","formattedProps","formattedImgixParams"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,aAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,SAAA,CAAA,GAAA,EAAA,MAAA,EAAiD;AAAA,MAAjBA,QAAiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM,CAAA,CACtD;;AACA,MAAIC,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,MAAuB,CAA3B,CAAA,EAA8B;AAC5B,WAAA,GAAA;AADF,GAAA,MAEO;AACL;AACA,QAAIC,MAAM,IAAV,IAAA,EAAoB;AAClB,aAAA,GAAA;AACD;;AACD,QAAMC,cAAc,GAAGD,MAAM,GAAGA,MAAM,CAANA,OAAAA,CAAAA,UAAAA,EAAH,EAAGA,CAAH,GAA7B,EAAA;AACA,QAAME,WAAW,GAAGH,GAAG,CAAHA,OAAAA,CAAAA,UAAAA,EAApB,EAAoBA,CAApB;AACA,QAAMI,MAAM,GAAGL,QAAQ,GAAA,UAAA,GAAvB,SAAA;AACA,WAAOK,MAAM,GAANA,cAAAA,GAAAA,GAAAA,GAAP,WAAA;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAW;AACpC,MAAMC,KAAK,GAAG,CAACC,KAAK,CAAN,KAAA,IAAgBA,KAAK,CAALA,KAAAA,IAAhB,CAAA,GAAA,SAAA,GAA+CA,KAAK,CAAlE,KAAA;AACA,MAAMC,MAAM,GAAG,CAACD,KAAK,CAAN,MAAA,IAAiBA,KAAK,CAALA,MAAAA,IAAjB,CAAA,GAAA,SAAA,GAAiDA,KAAK,CAArE,MAAA;AACA,MAAMP,GAAG,GAAGO,KAAK,CAALA,GAAAA,GAAYE,SAAS,CAACF,KAAK,CAAN,GAAA,EAAYA,KAAK,CAAjB,MAAA,EAA0BA,KAAK,CAApDA,QAAqB,CAArBA,GAAZ,SAAA;AAEA,SAAO,QAAA,CAAA,EAAA,EAAA,KAAA,EAA0B;AAAED,IAAAA,KAAK,EAAP,KAAA;AAASE,IAAAA,MAAM,EAAf,MAAA;AAAiBR,IAAAA,GAAG,EAAHA;AAAjB,GAA1B,CAAP;AALK,CAAA;AAQP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMU,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,MAAA,EAAY;AAC7C,MAAIC,MAAM,IAAV,IAAA,EAAoB;AAClB,WAAA,MAAA;AACD;;AACD,MAAMC,eAAe,GAArB,EAAA;;AACA,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,eAAA,GAAqB,cAAA,CAArB,MAAqB,CAArB,EAAA,EAAA,GAAA,eAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAA6C;AAAA,QAAA,kBAAA,GAAA,cAAA,CAAA,eAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAA,QAAjCC,CAAiC,GAAA,kBAAA,CAAA,CAAA,CAAA;AAAA,QAA9BC,CAA8B,GAAA,kBAAA,CAAA,CAAA,CAAA;;AAC3C,QAAIC,cAAc,CAAlB,CAAkB,CAAlB,EAAuB;AACrBH,MAAAA,eAAe,CAACG,cAAc,CAA9BH,CAA8B,CAAf,CAAfA,GAAAA,CAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,eAAe,CAAfA,CAAe,CAAfA,GAAAA,CAAAA;AACD;AACF;;AACD,SAAA,eAAA;AAZK,CAAA;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAA,SAAA,EAAA;AAAA,SAAe,UAAA,KAAA,EAAW;AACvD,QAAMC,cAAc,GAAGZ,WAAW,CAAlC,KAAkC,CAAlC;AACA,QAAMa,oBAAoB,GAAGR,mBAAmB,CAACO,cAAc,CAA/D,WAAgD,CAAhD;AAEA,WAAA,aAAO,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,cAAA,EAAA;AAA+B,MAAA,WAAW,EAAEC;AAA5C,KAAA,CAAA,CAAP;AAJ6B,GAAA;AAAxB,CAAA","sourcesContent":["import * as React from 'react'\nimport { PARAMS_EXP_MAP } from \"./constants\"\n\n/**\n * Creates a 1-step, or complete, URL from `domain` and `src` Strings.\n *\n * - First, the function checks if src has a defined `domain`. If it does, it \n * checks to see if `src` has a scheme, and prepends \"http\" or \"https\" as needed\n * - Otherwise, formatSrc formats `domain` and `src` Strings.\n *   - First it strips the two strings of the  leading and `/` or trailing `/` \n *     slash characters.\n *   - Then, it joins the two strings on a `/` character. IE, \n *    `strippedDomain + \"/\" + strippedSrc`.\n *   - If `domain` String argument `null` or `undefined`, the function returns\n *    the original `src` String.\n *\n * @param {String} src - URL that is either 1-step or 2-step\n * @param {String} domain - Domain string, optional\n * @returns 1-step, or complete, URL String. Ex, _assets.ix.net/foo/bar.jpg_\n */\nexport function formatSrc(src, domain, useHTTPS = true) {\n  // ignore if already has protocol\n  if (src.indexOf(\"://\") !== -1){\n    return src\n  } else {\n    // prepend domain if defined\n    if (domain == null) {\n      return src\n    }\n    const strippedDomain = domain ? domain.replace(/^\\/|\\/$/g, '') : \"\"\n    const strippedSrc = src.replace(/^\\/|\\/$/g, '')\n    const prefix = useHTTPS ? \"https://\" : \"http://\"\n    return prefix + strippedDomain + \"/\" + strippedSrc;\n  }\n}\n\n/**\n * A function that formats the following values in the props Object:\n *\n * - `width`: if undefined or negative gets set to `undefined`.\n * - `height`: if undefined or negative gets set to `undefined`.\n * - `src`: concatenated to `domain` if `src` defined and has no domain.\n *\n * @param {Object} props \n * @returns A formatted `props` Object.\n */\nexport const formatProps = (props) => {\n  const width = !props.width || props.width <= 1 ? undefined : props.width\n  const height = !props.height || props.height <= 1 ? undefined : props.height\n  const src = props.src ? formatSrc(props.src, props.domain, props.useHttps) : undefined\n\n  return Object.assign( {}, props, { width, height, src,} )\n}\n\n/**\n * Function that shortens params keys according to the imgix spec.\n * @param {Object} params - imgixParams object\n * @returns imgixParams object with shortened keys\n * @see https://www.imgix.com/docs/reference\n */\nexport const collapseImgixParams = (params) => {\n  if (params == null) {\n    return params;\n  }\n  const compactedParams = {}\n  for (const [k, v] of Object.entries(params)) {\n    if (PARAMS_EXP_MAP[k]) {\n      compactedParams[PARAMS_EXP_MAP[k]] = v\n    } else {\n      compactedParams[k] = v\n    }\n  }\n  return compactedParams\n}\n\n/**\n * `processPropsHOF` takes a Component's props and formats them to adhere to the \n * ImgixClient's specifications.\n * \n * @param {React.Element<typeof Component>} Component - A react component with\n * defined `props`.\n * @returns A React Component who's `props` have been formatted and \n * `imgixParams` have been collapsed.\n */\nexport const processPropsHOF = (Component) => (props) => {\n  const formattedProps = formatProps(props)\n  const formattedImgixParams = collapseImgixParams(formattedProps.imgixParams)\n\n  return <Component {...formattedProps} imgixParams={formattedImgixParams} />\n}\n"]},"metadata":{},"sourceType":"module"}